{"version":3,"sources":["../src/index.js"],"names":["MemoryStorage","logger","initialState","storage","key","value","callback","resolve","reject","log","keys"],"mappings":";;;;;;IAAqBA,a;AACnB,2BAAiD;AAAA,mFAAJ,EAAI;AAAA,QAAlCC,MAAkC,QAAlCA,MAAkC;AAAA,iCAA1BC,YAA0B;AAAA,QAA1BA,YAA0B,kCAAX,EAAW;;AAAA;;AAC/C,SAAKC,OAAL,GAAe,eAAc,EAAd,EAAkBD,YAAlB,CAAf;AACA,SAAKD,MAAL,GAAcA,MAAd;AACD;;;;0BAEa;AACZ,UAAI,KAAKA,MAAL,IAAe,OAAO,KAAKA,MAAZ,KAAuB,UAA1C,EAAsD;AACpD,aAAKA,MAAL;AACD;AACF;;;4BACQG,G,EAAKC,K,EAAOC,Q,EAAU;AAAA;;AAC7B,aAAO,aAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAKL,OAAL,CAAaC,GAAb,IAAoBC,KAApB;;AACA,cAAKI,GAAL,CAAS,qBAAT,EAAgCL,GAAhC,EAAqCC,KAArC;;AACA,YAAIC,QAAJ,EAAcA,SAAS,IAAT,EAAeD,KAAf;AACdE,gBAAQF,KAAR;AACD,OALM,CAAP;AAMD;;;4BAEQD,G,EAAKE,Q,EAAU;AAAA;;AACtB,aAAO,aAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,eAAKC,GAAL,CAAS,qBAAT,EAAgCL,GAAhC;;AACA,YAAMC,QAAQ,OAAKF,OAAL,CAAaC,GAAb,CAAd;AACA,YAAIE,QAAJ,EAAcA,SAAS,IAAT,EAAeD,KAAf;AACdE,gBAAQF,KAAR;AACD,OALM,CAAP;AAMD;;;+BAEWD,G,EAAKE,Q,EAAU;AAAA;;AACzB,aAAO,aAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,eAAKC,GAAL,CAAS,wBAAT,EAAmCL,GAAnC;;AACA,YAAMC,QAAQ,OAAKF,OAAL,CAAaC,GAAb,CAAd;AACA,eAAO,OAAKD,OAAL,CAAaC,GAAb,CAAP;AACA,YAAIE,QAAJ,EAAcA,SAAS,IAAT,EAAeD,KAAf;AACdE,gBAAQF,KAAR;AACD,OANM,CAAP;AAOD;;;+BAEWC,Q,EAAU;AAAA;;AACpB,aAAO,aAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,eAAKC,GAAL,CAAS,mBAAT;;AACA,YAAMC,OAAO,aAAY,OAAKP,OAAjB,CAAb;;AACA,YAAIG,QAAJ,EAAcA,SAAS,IAAT,EAAeI,IAAf;AACdH,gBAAQG,IAAR;AACD,OALM,CAAP;AAMD;;;;;;SA9CkBV,a","file":"index.js","sourcesContent":["export default class MemoryStorage {\n  constructor ({ logger, initialState = {} } = {}) {\n    this.storage = Object.assign({}, initialState)\n    this.logger = logger\n  }\n\n  log (...args) {\n    if (this.logger && typeof this.logger === 'function') {\n      this.logger(...args)\n    }\n  }\n  setItem (key, value, callback) {\n    return new Promise((resolve, reject) => {\n      this.storage[key] = value\n      this.log('setItem called with', key, value)\n      if (callback) callback(null, value)\n      resolve(value)\n    })\n  }\n\n  getItem (key, callback) {\n    return new Promise((resolve, reject) => {\n      this.log('getItem called with', key)\n      const value = this.storage[key]\n      if (callback) callback(null, value)\n      resolve(value)\n    })\n  }\n\n  removeItem (key, callback) {\n    return new Promise((resolve, reject) => {\n      this.log('removeItem called with', key)\n      const value = this.storage[key]\n      delete this.storage[key]\n      if (callback) callback(null, value)\n      resolve(value)\n    })\n  }\n\n  getAllKeys (callback) {\n    return new Promise((resolve, reject) => {\n      this.log('getAllKeys called')\n      const keys = Object.keys(this.storage)\n      if (callback) callback(null, keys)\n      resolve(keys)\n    })\n  }\n}\n"]}